import unittest
import numpy as np
from qubo_nn.problems import TSP


class TestTSP(unittest.TestCase):
    def test_gen_qubo_matrix(self):
        """Test whether a correct QUBO is generated.

        Test case from: https://arxiv.org/pdf/1811.11538.pdf
        """
        problem = TSP(
            {},
            [[0, 1/3., 2/3.], [1/3., 0, 1/3.], [1, 1/3., 0]],
            400
        )
        matrix = problem.gen_qubo_matrix()
        want = [
            [-800.00, 800.00, 800.00, 800.00, 0.00, 0.00, 800.00, 3.33, 10.00],
            [800.00, -800.00, 800.00, 0.00, 800.00, 0.00, 3.33, 800.00, 3.33],
            [800.00, 800.00, -800.00, 0.00, 0.00, 800.00, 6.67, 3.33, 800.00],
            [800.00, 3.33, 10.00, -800.00, 800.00, 800.00, 800.00, 0.00, 0.00],
            [3.33, 800.00, 3.33, 800.00, -800.00, 800.00, 0.00, 800.00, 0.00],
            [6.67, 3.33, 800.00, 800.00, 800.00, -800.00, 0.00, 0.00, 800.00],
            [800.00, 0.00, 0.00, 800.00, 3.33, 10.00, -800.00, 800.00, 800.00],
            [0.00, 800.00, 0.00, 3.33, 800.00, 3.33, 800.00, -800.00, 800.00],
            [0.00, 0.00, 800.00, 6.67, 3.33, 800.00, 800.00, 800.00, -800.00]
        ]
        matrix = matrix.round(2)
        self.assertCountEqual(matrix.tolist(), want)

        m = [[0, 1, 1.41, 2.23, 1], [1, 0, 1, 1.41, 2], [1.41, 1, 0, 1, 2.23], [2.23, 1.41, 1, 0, 3.16], [1, 2, 2.23, 3.16, 0]]
        problem = TSP(
            {},
            m / np.max(m),
            400
        )
        matrix = problem.gen_qubo_matrix()
        want = [
            [-800.00, 800.00, 800.00, 800.00, 800.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 3.16, 4.46, 7.06, 3.16],
            [800.00, -800.00, 800.00, 800.00, 800.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 3.16, 800.00, 3.16, 4.46, 6.33],
            [800.00, 800.00, -800.00, 800.00, 800.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 4.46, 3.16, 800.00, 3.16, 7.06],
            [800.00, 800.00, 800.00, -800.00, 800.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 7.06, 4.46, 3.16, 800.00, 10.00],
            [800.00, 800.00, 800.00, 800.00, -800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 3.16, 6.33, 7.06, 10.00, 800.00],
            [800.00, 3.16, 4.46, 7.06, 3.16, -800.00, 800.00, 800.00, 800.00, 800.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00],
            [3.16, 800.00, 3.16, 4.46, 6.33, 800.00, -800.00, 800.00, 800.00, 800.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00],
            [4.46, 3.16, 800.00, 3.16, 7.06, 800.00, 800.00, -800.00, 800.00, 800.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00],
            [7.06, 4.46, 3.16, 800.00, 10.00, 800.00, 800.00, 800.00, -800.00, 800.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00],
            [3.16, 6.33, 7.06, 10.00, 800.00, 800.00, 800.00, 800.00, 800.00, -800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00],
            [800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 3.16, 4.46, 7.06, 3.16, -800.00, 800.00, 800.00, 800.00, 800.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00],
            [0.00, 800.00, 0.00, 0.00, 0.00, 3.16, 800.00, 3.16, 4.46, 6.33, 800.00, -800.00, 800.00, 800.00, 800.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00],
            [0.00, 0.00, 800.00, 0.00, 0.00, 4.46, 3.16, 800.00, 3.16, 7.06, 800.00, 800.00, -800.00, 800.00, 800.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00],
            [0.00, 0.00, 0.00, 800.00, 0.00, 7.06, 4.46, 3.16, 800.00, 10.00, 800.00, 800.00, 800.00, -800.00, 800.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00],
            [0.00, 0.00, 0.00, 0.00, 800.00, 3.16, 6.33, 7.06, 10.00, 800.00, 800.00, 800.00, 800.00, 800.00, -800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00],
            [800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 3.16, 4.46, 7.06, 3.16, -800.00, 800.00, 800.00, 800.00, 800.00, 800.00, 0.00, 0.00, 0.00, 0.00],
            [0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 3.16, 800.00, 3.16, 4.46, 6.33, 800.00, -800.00, 800.00, 800.00, 800.00, 0.00, 800.00, 0.00, 0.00, 0.00],
            [0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 4.46, 3.16, 800.00, 3.16, 7.06, 800.00, 800.00, -800.00, 800.00, 800.00, 0.00, 0.00, 800.00, 0.00, 0.00],
            [0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 7.06, 4.46, 3.16, 800.00, 10.00, 800.00, 800.00, 800.00, -800.00, 800.00, 0.00, 0.00, 0.00, 800.00, 0.00],
            [0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 3.16, 6.33, 7.06, 10.00, 800.00, 800.00, 800.00, 800.00, 800.00, -800.00, 0.00, 0.00, 0.00, 0.00, 800.00],
            [800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 3.16, 4.46, 7.06, 3.16, -800.00, 800.00, 800.00, 800.00, 800.00],
            [0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 3.16, 800.00, 3.16, 4.46, 6.33, 800.00, -800.00, 800.00, 800.00, 800.00],
            [0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 4.46, 3.16, 800.00, 3.16, 7.06, 800.00, 800.00, -800.00, 800.00, 800.00],
            [0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 7.06, 4.46, 3.16, 800.00, 10.00, 800.00, 800.00, 800.00, -800.00, 800.00],
            [0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 0.00, 0.00, 0.00, 0.00, 800.00, 3.16, 6.33, 7.06, 10.00, 800.00, 800.00, 800.00, 800.00, 800.00, -800.00],
        ]
        self.assertCountEqual(matrix.round(2).tolist(), want)


    def test_gen_problems(self):
        st0 = np.random.get_state()
        np.random.seed(1)
        data = TSP.gen_problems({}, 1, size=4)
        np.random.set_state(st0)

        self.assertCountEqual(
            data[0]["dist_matrix"],
            [
                [0.0, 0.7203244934421581, 0.00011437481734488664, 0.30233257263183977],
                [0.14675589081711304, 0.0, 0.1862602113776709, 0.34556072704304774],
                [0.39676747423066994, 0.538816734003357, 0.0, 0.6852195003967595],
                [0.20445224973151743, 0.8781174363909454, 0.027387593197926163, 0.0]
            ]
        )
        self.assertEqual(
            data[0]["constraint"],
            183.4609604734254
        )
